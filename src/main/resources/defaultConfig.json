{
  "author" : "zhangxuejun",
  "version" : "0.0.1",
  "userSecure" : "",
  "currTypeMapperGroupName" : "H6-Group",
  "currTemplateGroupName" : "H6-Group",
  "currColumnConfigGroupName" : "H6-Group",
  "currGlobalConfigGroupName" : "H6-Group",
  "typeMapper" : {
    "H6-Group" : {
      "name" : "H6-Group",
      "elementList" : [ {
        "matchType" : "REGEX",
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "varchar2(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|medium|long)*text",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "java.lang.Double"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "integer",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|small|medium)*int(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int4",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int8",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "REGEX",
        "columnType" : "bigint(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "date",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "datetime",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "timestamp",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "time",
        "javaType" : "java.time.LocalTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "boolean",
        "javaType" : "java.lang.Boolean"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "timestamp(0)",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "numeric(10)",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "vdrgid",
        "javaType" : "com.hd123.hdpos4.mdata.service.vendor.vendor.ConciseVendor"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "store",
        "javaType" : "com.hd123.hdpos4.mdata.service.store.store.ConciseStore"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "numeric(19)",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "numeric(24,2)",
        "javaType" : "java.math.BigDecimal"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "numeric(24,4)",
        "javaType" : "java.math.BigDecimal"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "numeric(19,4)",
        "javaType" : "java.lang.BigDecimal"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "INT",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "unknown",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "number(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "REGEX",
        "columnType" : "number(\\(\\d+,\\d+\\))?",
        "javaType" : "java.lang.BigDecimal"
      } ]
    }
  },
  "template" : {
    "H6-Group" : {
      "name" : "H6-Group",
      "elementList" : [ {
        "name" : "api.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"\", \".java\")\n\n /**      \n * 版权所有(C)，上海海鼎信息工程股份有限公司，${year.vm}，所有权利保留。      \n *      \n * 项目名：$!{module}\n * 文件名：$!{tableInfo.name}.java      \n * 模块说明：      \n * 修改历史：      \n * ${year.vm}年${month.vm}月${day.vm}日 - ${author} - 创建。      \n */ \n\n##使用宏定义设置包后缀\n##setPackageSuffix(\"entity\")\n\n#setPackage()\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.math.BigDecimal;\nimport java.io.Serializable;\n\n##使用宏定义实现类注释信息\n#classComment(\"实体类\")\npublic class $!{tableInfo.name}#if(${extendsClassName}) extends $!{tool.getClsNameByFullName($extendsClassName)} #else implements Serializable #end {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$ignoreFields.contains($strTool.toLowerCase($!{column.name})))\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    #end \n#end\n\n#foreach($column in $tableInfo.fullColumn)\n##使用宏定义实现get,set方法\n    #if(!$ignoreFields.contains($strTool.toLowerCase($column.name)))\n    #if(${column.comment})\n    /** ${column.comment} */#end\n    #getSetMethod($column)\n    #end \n#end\n\n}\n"
      }, {
        "name" : "apis.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##定义初始变量\n#set($fileName = $tool.append($tableInfo.name, \"s\"))\n##设置回调\n$!callback.setFileName($tool.append($fileName, \".java\"))\n\n /**      \n * 版权所有(C)，上海海鼎信息工程股份有限公司，${year.vm}，所有权利保留。      \n *      \n * 项目名：$!{module}\n * 文件名：$!{fileName}.java      \n * 模块说明：      \n * 修改历史：      \n * ${year.vm}年${month.vm}月${day.vm}日 - ${author} - 创建。      \n */ \n\n##使用宏定义设置包后缀\n##setPackageSuffix(\"entity\")\n\n#setPackage()\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\n\nimport com.hd123.latin.biz.query.DCriteria;\nimport com.hd123.latin.sys.service.proplang.DefaultTranslateFields;\nimport org.apache.commons.collections.ListUtils;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n/**\n * 查询条件定义\n *\n * @author $!author\n */\npublic class $!{fileName} {\n\n  /** =================== 模块 =================== */\n  /** 模块定义 */\n  // todo 定义模块id和模块号\n  public static final String MODULEID = \"模块id\";\n  // todo 替换真实的模块号\n  public static final int MODULENO = -1000;\n  /** 单据类型定义 */\n  // todo 替换真实的单据类型\n  public static final String BILLTYPE = \"单据类型\";\n  /** 单据名称定义 */\n  public static final String BILLBUS = \"单据类型\";\n  /** 属性定义 */\n  public static final String FETCH_DETAILS = \"details\";\n  /** 属性定义 */\n  public static final String FETCH_DETAILS_CUSTOMFIELDS = \"details.customFields\";\n  \n  \n  /** =========================查询条件============================ **/\n  /** 查询条件(String)：单据类型等于。 */\n  public static final String CONDITION_CLS_EQUALS = \"cls.equals\";\n  /** 查询条件(String)：单号等于。 */\n  public static final String CONDITION_BILLNUMBER_EQUALS = \"num.equals\";\n\n  public static DCriteria getDefaultCriteria() {\n     DCriteria criteria = new DCriteria();\n     \n    // todo 默认模版设置\n    \n    return criteria;\n  }\n  \n  public static final List<String> NORMAL_TRANSLATE_FIELDS = ListUtils\n      .union(DefaultTranslateFields.nomal, Arrays.asList(\"munit#MeasureUnit\"));\n\n  public static final List<String> HIGH_TRANSLATE_FIELDS = ListUtils\n      .union(DefaultTranslateFields.nomal, Arrays.asList(\"munit#MeasureUnit\"));\n}\n"
      }, {
        "name" : "pentity.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"\", \".java\")\n\n##定义初始变量\n#set($fileName = $tool.append(\"P\", $tableInfo.name))\n##设置回调\n$!callback.setFileName($tool.append($fileName, \".java\"))\n\n /**      \n * 版权所有(C)，上海海鼎信息工程股份有限公司，${year.vm}，所有权利保留。      \n *      \n * 项目名：$!{module}\n * 文件名：$!{fileName}.java      \n * 模块说明：      \n * 修改历史：      \n * ${year.vm}年${month.vm}月${day.vm}日 - ${author} - 创建。      \n */ \n\n##使用宏定义设置包后缀\n##setPackageSuffix(\"entity\")\n\n#setPackage()\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.math.BigDecimal;\nimport java.io.Serializable;\nimport javax.persistence.Entity;\nimport javax.persistence.Column;\nimport javax.persistence.Table;\nimport com.hd123.latin.biz.LatinConstants;\n\n##使用宏定义实现类注释信息\n#classComment(\"实体类\")\n@Entity\n@Table(name = P$!{tableInfo.name}.TABLE_NAME)\npublic class P$!{tableInfo.name}#if(${extendsClassName}) extends $!{tool.getClsNameByFullName($extendsClassName)} #else implements Serializable #end {\n    private static final long serialVersionUID = $!tool.serial();\n    \n    public static final String TABLE_NAME = \"$!{tableInfo.name}\";\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$ignoreFields.contains($strTool.toLowerCase($!{column.name})))\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    #end \n#end\n\n#foreach($column in $tableInfo.fullColumn)\n    ##使用宏定义实现get,set方法\n    #if(!$ignoreFields.contains($strTool.toLowerCase($column.name)))\n    #if(${column.comment})\n/** ${column.comment} */\n    #end\n@Column(name = \"$!{column.name}\", #if($!{tool.getClsNameByFullName($column.type)} == \"String\") length = #if($column.ext.get(\"length\") == 14) LatinConstants.LENGTH_BILLNUMBER, #else $column.ext.get(\"length\"), #end #end #if($!{tool.getClsNameByFullName($column.type)} == \"BigDecimal\") precision = $column.ext.get(\"precision\"), scale = #if($column.ext.get(\"scale\") == 2) LatinConstants.SCALE_MONEY, #elseif($column.ext.get(\"scale\") == 4) LatinConstants.SCALE_PRICE, #else $column.ext.get(\"scale\"), #end #end nullable = $column.ext.get(\"nullable\") )#getSetMethod($column)\n    #end \n\n#end\n\n}\n"
      }, {
        "name" : "service.java.vm",
        "code" : "##定义初始变量\n#set($fileName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($fileName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n /**      \n * 版权所有(C)，上海海鼎信息工程股份有限公司，${year.vm}，所有权利保留。      \n *      \n * 项目名：$!{module}\n * 文件名：$!{fileName}.java      \n * 模块说明：      \n * 修改历史：      \n * ${year.vm}年${month.vm}月${day.vm}日 - ${author} - 创建。      \n */ \n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.$!{tableInfo.name};\nimport com.hd123.latin.biz.entity.LOperateContext;\nimport com.hd123.latin.biz.query.HQueryResult;\nimport com.hd123.latin.exception.LatinServiceException;\nimport com.hd123.rumba.commons.biz.query.QueryDefinition;\n\nimport java.util.Date;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})服务接口\n *\n * @author $!author\n */\npublic interface $!{fileName} {\n    \n  /** 用于在Spring容器的默认ID。 */\n  // todo xml中注册bean的id\n  public static final String DEFAULT_CONTEXT_ID = \"todo: 注册service的beanId\";\n    \n  /**\n   *  保存$!{tableInfo.comment}。\n   *\n   * @param $!tool.firstLowerCase($!{tableInfo.name})\n   *          $!{tableInfo.comment}, not null。\n   * @param targetState\n   *          目标状态, not null。\n   * @param operCtx\n              操作信息, not null。          \n   */\n  String save($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}), int targetState, LOperateContext operCtx)\n        throws LatinServiceException;\n        \n  /**\n   * 删除$!{tableInfo.comment}。\n   * \n   * @param billNumber\n   *          单号，not null。\n   * @param lstUpdTime\n   *          最后修改时间，not null。\n   * @param operCtx\n   *          操作信息，not null。\n   */\n  void remove(String billNumber, Date lstUpdTime, LOperateContext operCtx)\n      throws LatinServiceException;\n        \n  /**\n   * 更改业务状态。\n   * \n   * @param billNumber\n   *          单号，not null。\n   * @param lstupdTime\n   *          最后修改时间。\n   * @param state\n   *          目标状态，not null。\n   * @param operCtx\n   *          操作信息，not null。\n   */\n  void changeBizState(String billNumber, Date lstupdTime, int state, LOperateContext operCtx)\n      throws LatinServiceException;\n      \n  /**\n   * 获取指定条件的单据。\n   * \n   * @param billNumber\n   *          单号，not null。\n   * @param fetchParts  \n   * @return $!{tableInfo.comment}。\n   */\n  $!{tableInfo.name} getByNumber(String billNumber, String... fetchParts);\n  \n  /**\n   * $!{tableInfo.comment}。\n   * \n   * @param definition\n   *          查询条件定义，not null。\n   * @param fetchParts\n   * @return 分页信息。\n   */\n  HQueryResult<$!{tableInfo.name}> query(QueryDefinition definition, String... fetchParts);\n\n}"
      }, {
        "name" : "serviceImpl.java.vm",
        "code" : "##定义初始变量\n#set($fileName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n#set($clazz = $!tool.firstLowerCase($!{tableInfo.name}))\n\n##设置回调\n$!callback.setFileName($tool.append($fileName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n /**      \n * 版权所有(C)，上海海鼎信息工程股份有限公司，${year.vm}，所有权利保留。      \n *      \n * 项目名：$!{module}\n * 文件名：$!{fileName}.java      \n * 模块说明：      \n * 修改历史：      \n * ${year.vm}年${month.vm}月${day.vm}日 - ${author} - 创建。      \n */ \n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\n\nimport java.util.Date;\nimport javax.persistence.PersistenceException;\nimport $!{tableInfo.savePackageName}.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport com.hd123.hdpos4.biz.BillState;\nimport com.hd123.latin.biz.entity.LOperateContext;\nimport com.hd123.latin.biz.query.HQueryResult;\nimport com.hd123.latin.dao.International;\nimport com.hd123.latin.exception.LatinServiceException;\nimport com.hd123.latin.util.ApplicationContextUtils;\nimport com.hd123.latin.util.LatinUtil;\nimport com.hd123.latin.util.LoopWatch;\nimport com.hd123.rumba.commons.biz.query.QueryDefinition;\nimport com.hd123.rumba.commons.lang.Assert;\nimport com.hd123.rumba.commons.lang.StringUtil;\n\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})服务实现类\n *\n * @author $!author\n */\npublic class $!{fileName} implements $!{tableInfo.name}Service {\n\n  @Override\n  @International(reverse = true)\n  public String save($!{tableInfo.name} $!{clazz}, int targetState, LOperateContext operCtx)\n        throws LatinServiceException {\n    Assert.assertArgumentNotNull($!{clazz}, \"$!{clazz}\");\n    Assert.assertArgumentNotNull(targetState, \"targetState\");\n    Assert.assertArgumentNotNull(operCtx, \"operCtx\");\n    // todo 前置处理...\n    \n    // todo 保存单据\n    String billNumber = null;\n    LoopWatch loopWatch = new LoopWatch();\n    while (true) {\n      try {\n        billNumber = get$!tool.firstUpperCase($!{tableInfo.name})Dao().save($!{clazz}, targetState, operCtx);\n        break;\n      } catch (PersistenceException e) {\n        if (loopWatch.consume().stoped()) {\n          throw e;\n        }\n        if (LatinUtil.isPrimaryKeyException(e)) {\n          // todo 重置单号\n        } else {\n          throw e;\n        }\n      }\n    }\n    return billNumber;\n  }\n  \n  @Override\n  public void remove(String billNumber, Date lstUpdTime, LOperateContext operCtx)\n      throws LatinServiceException {\n    Assert.assertArgumentNotNull(billNumber, \"billNumber\");\n    Assert.assertArgumentNotNull(lstUpdTime, \"lstUpdTime\");\n    Assert.assertArgumentNotNull(operCtx, \"operCtx\");\n    $!{tableInfo.name} $!{clazz} = safeGet(billNumber, lstUpdTime);\n    if (BillState.INITIAL != $!{clazz}.getStat()) {\n      // todo 非未审核的单据不允许保存\n    }\n    get$!tool.firstUpperCase($!{tableInfo.name})Dao().remove($!{clazz}, operCtx);\n  }\n  \n  @Override\n  public void changeBizState(String billNumber, Date lstUpdTime, int state, LOperateContext operCtx)\n      throws LatinServiceException {\n      // todo fetch定义\n    $!{tableInfo.name} $!{clazz} = safeGet(billNumber, lstUpdTime, \"todo: 取明细数据\");\n    \n    if (state % 100 == 10) {\n        // todo 作废场景下的校验\n    }\n    \n    get$!tool.firstUpperCase($!{tableInfo.name})Dao().changeBizState($!{clazz}.getNum(), state, operCtx);\n  }\n  \n  @Override\n  public $!{tableInfo.name} getByNumber(String billNumber, String... fetchParts) {\n    if (StringUtil.isNullOrBlank(billNumber))\n      return null;\n    return get$!tool.firstUpperCase($!{tableInfo.name})Dao().getByNumber(billNumber, fetchParts);\n  }\n  \n  @Override\n  public HQueryResult<$!{tableInfo.name}> query(QueryDefinition definition, String... fetchParts) {\n    Assert.assertArgumentNotNull(definition, \"definition\");\n    return get$!tool.firstUpperCase($!{tableInfo.name})Dao().query(definition, fetchParts);\n  }\n  \n  private $!{tableInfo.name} safeGet(String billNumber, Date lstUpdTime, String... fetchParts) {\n    Assert.assertArgumentNotNull(billNumber, \"billNumber\");\n    Assert.assertArgumentNotNull(lstUpdTime, \"lstUpdTime\");\n    $!{tableInfo.name} $!{clazz} = get$!tool.firstUpperCase($!{tableInfo.name})Dao().getByNumber(billNumber, fetchParts);\n    \n    // todo 安全校验\n    \n    return $!{clazz};\n  } \n    \n  private $!{tableInfo.name}Dao get$!tool.firstUpperCase($!{tableInfo.name})Dao() {\n    return ApplicationContextUtils.getBean($!{tableInfo.name}Dao.DEFAULT_CONTEXT_ID, $!{tableInfo.name}Dao.class);\n  }\n}"
      }, {
        "name" : "dao.java.vm",
        "code" : "##定义初始变量\n#set($fileName = $tool.append($tableInfo.name, \"Dao\"))\n#set($clazz = $!tool.firstLowerCase($!{tableInfo.name}))\n##设置回调\n$!callback.setFileName($tool.append($fileName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dao\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n /**      \n * 版权所有(C)，上海海鼎信息工程股份有限公司，${year.vm}，所有权利保留。      \n *      \n * 项目名：$!{module}\n * 文件名：$!{fileName}.java      \n * 模块说明：      \n * 修改历史：      \n * ${year.vm}年${month.vm}月${day.vm}日 - ${author} - 创建。      \n */ \n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;\n\nimport $!{tableInfo.savePackageName}.$!{tableInfo.name};\nimport com.hd123.latin.biz.entity.LOperateContext;\nimport com.hd123.latin.biz.query.HQueryResult;\nimport com.hd123.latin.exception.LatinServiceException;\nimport com.hd123.rumba.commons.biz.query.QueryDefinition;\nimport java.util.List;\n\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})数据库访问层\n *\n * @author $!author\n */\npublic interface $!{fileName} {\n\n  /** 用于在Spring容器的默认ID。 */\n  // todo xml中注册bean的id\n  public static final String DEFAULT_CONTEXT_ID = \"todo: 注册dao的beanId\";\n  \n  \n  /**\n   * \n   * @param billNumber\n   *          单号。\n   * @param fetchParts\n   * @return $!{tableInfo.comment}。\n   */\n  $!{tableInfo.name} getByNumber(String billNumber, String... fetchParts);\n  \n  /**\n   * \n   * @param $!{clazz}\n   *          $!{tableInfo.comment}, not null。\n   * @param targetState\n   *          目标状态。\n   * @param operCtx\n   *          操作信息，not null。\n   * @return 单号。\n   */\n  String save($!{tableInfo.name} $!{clazz}, int targetState, LOperateContext operCtx) throws LatinServiceException;\n\n  /**\n   * \n   * @param billNumber\n   *          单号，not null。\n   * @param state\n   *          目标状态，not null。\n   * @param operCtx\n   *          操作信息，not null。\n   */\n  void changeBizState(String billNumber, int state, LOperateContext operCtx)\n      throws LatinServiceException;\n\n  /**\n   * \n   * @param $!{clazz}\n   *          $!{tableInfo.comment}, not null。\n   * @param operCtx\n   *          操作信息，not null。\n   */\n  void remove($!{tableInfo.name} $!{clazz}, LOperateContext operCtx);\n  \n  /**\n   * \n   * @param definition\n   *          查询定义，not null。\n   * @return 查询结果。\n   */\n  HQueryResult<$!{tableInfo.name}> query(QueryDefinition definition, String... fetchParts);\n\n}\n"
      }, {
        "name" : "daoImpl.java.vm",
        "code" : "##定义初始变量\n#set($fileName = $tool.append($tableInfo.name, \"DaoImpl\"))\n#set($clazz = $!tool.firstLowerCase($!{tableInfo.name}))\n\n##设置回调\n$!callback.setFileName($tool.append($fileName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dao/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n /**      \n * 版权所有(C)，上海海鼎信息工程股份有限公司，${year.vm}，所有权利保留。      \n *      \n * 项目名：$!{module}\n * 文件名：$!{fileName}.java      \n * 模块说明：      \n * 修改历史：      \n * ${year.vm}年${month.vm}月${day.vm}日 - ${author} - 创建。      \n */ \n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao.impl;\n\nimport org.springframework.beans.factory.config.ConfigurableBeanFactory;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Date;\nimport $!{tableInfo.savePackageName}.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.P$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.$!{tableInfo.name}s;\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport com.hd123.hdpos4.biz.BillState;\nimport com.hd123.latin.biz.LatinConstants;\nimport com.hd123.latin.biz.entity.CustomField;\nimport com.hd123.latin.biz.entity.LOperateContext;\nimport com.hd123.latin.biz.query.HQueryResult;\nimport com.hd123.latin.dao.BasicDaoImpl;\nimport com.hd123.latin.dao.International;\nimport com.hd123.latin.dao.LatinTX;\nimport com.hd123.latin.dao.ProcedureCaller;\nimport com.hd123.latin.dao.ProcedureResult;\nimport com.hd123.latin.exception.LatinServiceException;\nimport com.hd123.latin.message.ServerMessages;\nimport com.hd123.latin.query.NativeBigInQueryExecutor;\nimport com.hd123.latin.query.QueryDefinitionDecoder;\nimport com.hd123.latin.sys.service.config.customfield.CustomFieldService;\nimport com.hd123.latin.util.ApplicationContextUtils;\nimport com.hd123.latin.util.LatinUtil;\nimport com.hd123.rumba.commons.biz.query.QueryDefinition;\nimport com.hd123.rumba.commons.biz.query.QueryResult;\nimport com.hd123.rumba.commons.lang.Assert;\nimport com.hd123.rumba.commons.jpa.query.sql.SQLSubquery;\nimport com.hd123.rumba.commons.lang.StringUtil;\n\nimport java.sql.Types;\nimport java.util.List;\n\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})服务实现类\n *\n * @author $!author\n */\n@Repository($!{tableInfo.name}Dao.DEFAULT_CONTEXT_ID)\n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n@Transactional(rollbackFor = Exception.class, propagation = Propagation.SUPPORTS)\npublic class $!{fileName} extends BasicDaoImpl implements $!{tableInfo.name}Dao {\n\n  @Override\n  @LatinTX\n  public String save($!{tableInfo.name} $!{clazz}, int targetState, LOperateContext operCtx)\n        throws LatinServiceException {\n     \n     // todo  converter转换\n     P$!{tableInfo.name} entity = null;   \n    // todo 保存单据\n    // todo 更新未审核日志\n    // todo 保存自定义字段\n    // todo 状态变更\n    if ($!{clazz}.getLstupdTime() == null && !StringUtil.isNullOrBlank($!{clazz}.getModNum())) {\n      // 修正\n      bizToRevised($!{clazz}.getNum(), targetState, operCtx);\n    } else if (targetState > 0 && $!{clazz}.getStat() != targetState) {\n      changeBizState($!{clazz}.getNum(), targetState, operCtx);\n    }\n    return entity.getNum();\n  }\n  \n  @Override\n  @LatinTX\n  public void changeBizState(String billNumber, int targetState, LOperateContext operCtx)\n      throws LatinServiceException {\n    if (targetState % 100 == 10) {\n      // 作废\n      bizToAborted(billNumber, targetState, operCtx);\n    } else {\n      // 状态流\n      bizToAudtied(billNumber, targetState, operCtx);\n    }\n  }\n  \n  @Override\n  @LatinTX\n  public void remove($!{tableInfo.name} $!{clazz}, LOperateContext operCtx) {\n    // todo 刪除单据和日志\n  }\n  \n  @Override\n  @International(moduleId = $!{tableInfo.name}s.MODULEID)\n  public $!{tableInfo.name} getByNumber(String billNumber, String... fetchParts) {\n    QueryDefinition def = new QueryDefinition();\n    // todo 使用单号和单据类型作为筛选条件\n    def.addCondition($!{tableInfo.name}s.CONDITION_BILLNUMBER_EQUALS, billNumber);\n    def.addCondition($!{tableInfo.name}s.CONDITION_CLS_EQUALS, $!{tableInfo.name}s.BILLTYPE);\n    List<$!{tableInfo.name}> $!{clazz}s = query(def, fetchParts).getRecords();\n    if ($!{clazz}s.isEmpty())\n      return null;\n    return $!{clazz}s.get(0);\n  }\n  \n  @Override\n  @International(moduleId = $!{tableInfo.name}s.MODULEID)\n  public HQueryResult<$!{tableInfo.name}> query(QueryDefinition definition, String... fetchParts) {\n    List<CustomField> fields = getCustomFields();\n    QueryDefinitionDecoder queryDecoder = new QueryDefinitionDecoder(\"$!{clazz}\", \"o\");\n    // todo 增加数据解析器 $!{tableInfo.name}QueryDecoder\n    // todo 增加查询数据   sq.addSelect\n    SQLSubquery sq = queryDecoder.decodeNative(definition);\n    // todo 查询单头\n    NativeBigInQueryExecutor queryExecutor = new NativeBigInQueryExecutor(em, sq, fields);\n    QueryResult<$!{tableInfo.name}> qr = queryExecutor.query(definition.getPage(), definition.getPageSize(),\n        $!{tableInfo.name}.class);\n    HQueryResult<$!{tableInfo.name}> result = new HQueryResult<$!{tableInfo.name}>();\n    result.setMore(qr.isMore());\n    result.setPaging(qr.getPaging());\n    result.setRecords(qr.getRecords());\n    \n    // todo 查询其他明细\n    \n    return result;\n  }\n  \n  private void bizToAborted(String num, int targetState, LOperateContext operCtx)\n      throws LatinServiceException {\n     // todo 前置业务\n     \n     // todo 替换存储过程\n    ProcedureResult pr = getProcedureCaller().call(\"todo: 作废存储过程\", new Object[] {\n        $!{tableInfo.name}s.BILLTYPE, num, LatinUtil.toOperInfo(operCtx.getOperator()), targetState,\n        ProcedureCaller.OUT_VARCHAR }, Types.INTEGER);\n    LatinUtil.checkProcedureResult(pr,\n        LatinUtil.getServerMessages(LatinConstants.SYSTEM, false).get(ServerMessages.abort));\n    \n    // todo 后置业务\n    \n  }\n  \n  private void bizToAudtied(String num, int targetState, LOperateContext operCtx)\n      throws LatinServiceException {\n    // todo 前置业务\n    \n    // todo 替换存储过程\n    ProcedureResult pr = getProcedureCaller().call(\"todo: 审核存储过程\", new Object[] {\n        $!{tableInfo.name}s.BILLTYPE, num, LatinUtil.toOperInfo(operCtx.getOperator()), targetState,\n        ProcedureCaller.OUT_VARCHAR }, Types.INTEGER);\n    LatinUtil.checkProcedureResult(pr,\n        LatinUtil.getServerMessages(LatinConstants.SYSTEM, false).get(ServerMessages.operate));\n  \n    // todo 后置业务\n  }\n  \n  private void bizToRevised(String num, int targetState, LOperateContext operCtx)\n      throws LatinServiceException {\n    // todo 前置业务\n    \n    // todo 替换存储过程\n    ProcedureResult pr = getProcedureCaller().call(\"todo: 修正存储过程\", new Object[] {\n        $!{tableInfo.name}s.BILLTYPE, num, LatinUtil.toOperInfo(operCtx.getOperator()), targetState,\n        ProcedureCaller.OUT_VARCHAR }, Types.INTEGER);\n    LatinUtil.checkProcedureResult(pr,\n        LatinUtil.getServerMessages(LatinConstants.SYSTEM, false).get(ServerMessages.operate));\n  \n    // todo 后置业务\n  }   \n  \n  private List<CustomField> getCustomFields() {\n    return getCustomFieldService().getValids($!{tableInfo.name}s.MODULEID);\n  }\n  \n   private CustomFieldService getCustomFieldService() {\n    return ApplicationContextUtils.getBean(CustomFieldService.DEFAULT_CONTEXT_ID,\n        CustomFieldService.class);\n  }\n  \n  private ProcedureCaller getProcedureCaller() {\n    return ApplicationContextUtils.getBean(ProcedureCaller.DEFAULT_CONTEXT_ID,\n        ProcedureCaller.class);\n  }\n}"
      }, {
        "name" : "controller.java.vm",
        "code" : "##定义初始变量\n#set($fileName = $tool.append($tableInfo.name, \"Controller\"))\n#set($clazz = $!tool.firstLowerCase($!{tableInfo.name}))\n#set($apiPackageName = $strTool.replaceAssignStr($!{tableInfo.savePackageName}, \".controllers\"))\n##设置回调\n$!callback.setFileName($tool.append($fileName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n /**      \n * 版权所有(C)，上海海鼎信息工程股份有限公司，${year.vm}，所有权利保留。      \n *      \n * 项目名：$!{module}\n * 文件名：$!{fileName}.java      \n * 模块说明：      \n * 修改历史：      \n * ${year.vm}年${month.vm}月${day.vm}日 - ${author} - 创建。      \n */\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}#{end};\n\nimport java.text.ParseException;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\nimport $!{apiPackageName}.$!{tableInfo.name};\nimport $!{apiPackageName}.$!{tableInfo.name}s;\nimport $!{apiPackageName}.P$!{tableInfo.name};\nimport $!{apiPackageName}.service.$!{tableInfo.name}Service;\nimport com.hd123.latin.exception.LatinServiceException;\nimport com.hd123.latin.generator.NextBillNumberGenerator;\nimport com.hd123.latin.web.controllers.common.QueryFilter;\nimport com.hd123.latin.sys.service.config.module.BillNumNaviParameter;\nimport com.hd123.latin.sys.service.config.module.ModuleQueryParameter;\nimport com.hd123.latin.sys.service.config.module.ModuleService;\nimport com.hd123.latin.sys.service.dquery.DQueryDefinition;\nimport com.hd123.latin.sys.service.dquery.DQueryResult;\nimport com.hd123.latin.sys.service.dquery.DQueryService;\nimport com.hd123.latin.impex.ImpexConstants;\nimport com.hd123.latin.impex.ImpexParams;\nimport com.hd123.latin.util.JsonUtil;\nimport com.hd123.latin.util.LatinUtil;\nimport com.hd123.hdpos4.controllers.common.Hdpos4Controller;\nimport com.hd123.hdpos4.commons.service.config.module.H4ComponentRefOutput;\nimport com.hd123.hdpos4.commons.service.config.module.H4ModuleService;\nimport com.hd123.hdpos4.controllers.base.PrintUpd;\nimport com.hd123.hdpos4.controllers.common.BCalcRefParams;\nimport com.hd123.rumba.commons.lang.Assert;\nimport com.hd123.rumba.commons.lang.StringUtil;\nimport com.hd123.rumba.quartz.service.JobScheduleHandler;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})控制层\n *\n * @author $!author\n */\n@Controller\n@RequestMapping(value = \"todo:url路径\", produces = \"application/json;charset=utf-8\")\npublic class $!{fileName} extends Hdpos4Controller {\n\n  // todo 需要在xml中注册beanId\n  @Autowired\n  private $!{tableInfo.name}Service $!{clazz}Service;\n  @Autowired\n  private NextBillNumberGenerator billNumberGererator;\n  @Autowired\n  private ModuleService moduleService;\n  @Autowired\n  private H4ModuleService h4ModuleService;\n  @Autowired\n  private DQueryService dQueryService;\n\n  @Override\n  protected void buildModuleContext(Map<String, Object> moduleContext, String moduleId) {\n    // todo 按前端页面配置来决定Arrays.asList的数据\n    super.buildModuleContext(moduleContext, moduleId, $!{tableInfo.name}s.MODULENO, \n        Arrays.asList(\"searchgrid\", \"form\", \"viewgrid\"));\n  }\n  \n  /**\n   * 创建一个单据对象\n   *\n   * @return\n   */\n  @RequestMapping(value = \"create\", method = RequestMethod.GET)\n  public @ResponseBody $!{tableInfo.name} create() throws LatinServiceException {\n    String cls = $!{tableInfo.name}s.BILLTYPE;\n    String billNumber = billNumberGererator.allocate(getSessionOrgCode(), P$!{tableInfo.name}.class.getName(),\n        cls);\n    $!{tableInfo.name} $!{clazz} = new $!{tableInfo.name}();\n    // todo 设置其他默认值\n    return $!{clazz};\n  }\n  \n  /**\n   * @param modNum\n   *          修正单号，not null。\n   *\n   * @return\n   * @throws ParseException\n   * @throws IllegalArgumentException\n   */\n  @RequestMapping(value = \"createForRevise\", method = RequestMethod.GET)\n  public @ResponseBody $!{tableInfo.name} createForRevise(@RequestParam(value = \"modNum\")\n    String modNum, @RequestParam(value = \"lstUpdTime\")\n    String lstUpdTime) throws LatinServiceException, IllegalArgumentException, ParseException {\n    Assert.assertArgumentNotNull(modNum, \"modNum\");\n    $!{tableInfo.name} $!{clazz} = $!{clazz}Service.getByNumber(modNum, $!{tableInfo.name}s.FETCH_DETAILS_CUSTOMFIELDS);\n  \n    // todo 修正逻辑\n    \n    return $!{clazz};\n  }\n  \n  /**\n   * 查询单据\n   *\n   * @param searchFilter\n   *          查询条件，not null。\n   * @return 单据分页。\n   */\n  @RequestMapping(value = \"query\", method = RequestMethod.POST)\n  public @ResponseBody DQueryResult<$!{tableInfo.name}> query(@RequestBody\n    QueryFilter queryFilter) {\n    DQueryDefinition dQueryDef = buildQueryDefinition(queryFilter);\n    dQueryDef = buildQuerySelect(dQueryDef);\n    DQueryResult<$!{tableInfo.name}> result = dQueryService.query($!{tableInfo.name}s.MODULEID, dQueryDef, $!{tableInfo.name}.class);\n \n    dQueryDef.getOrderBys().clear();\n    dQueryDef.getSelects().clear();\n    dQueryDef.setPage(0);\n    dQueryDef.setPageSize(0);\n    \n    // todo 查询汇总的合计信息\n    \n    return result;\n  }\n  \n   /**\n   * 保存。\n   *\n   * @param $!{clazz}\n   *          单据json串。\n   * @return\n   */\n  @RequestMapping(value = \"save\", method = RequestMethod.POST)\n  public @ResponseBody String save(@RequestBody\n    $!{tableInfo.name} $!{clazz}, @RequestParam(value = \"targetState\")\n    int targetState, @RequestParam(value = \"cacheKey\", required = false)\n     String cacheKey) throws LatinServiceException {\n  \n    // 从缓存中获取明细数据\n    if (!StringUtil.isNullOrBlank(cacheKey)) {\n      // todo 添加明细缓存， 有多个明细时主要添加多个缓存\n    }\n    return $!{clazz}Service.save($!{clazz}, targetState, getOperateContext());\n  }\n  \n  /**\n   * 删除定单。\n   *\n   * @param id\n   *          单据标识，not null。\n   * @return\n   */\n  @RequestMapping(value = \"remove\", method = RequestMethod.POST)\n  @ResponseStatus(HttpStatus.OK)\n  public void remove(@RequestParam(value = \"billNumber\")\n    String billNumber, @RequestParam(value = \"lstUpdTime\")\n    String lstUpdTime) throws ParseException, LatinServiceException {\n    \n    $!{clazz}Service.remove(billNumber, StringUtil.toDate(lstUpdTime, JsonUtil.DATE_FORMAT),\n        getOperateContext());\n  }\n  \n  /**\n   * 改变单据业务状态。\n   *\n   * @param billNumber\n   *          单据标识，not null。\n   * @param lstUpdTime\n   *          版本号。\n   * @return\n   */\n  @RequestMapping(value = \"changeBizState\", method = RequestMethod.POST)\n  @ResponseStatus(HttpStatus.OK)\n  public void changeBizState(@RequestParam(value = \"billNumber\")\n    String billNumber, @RequestParam(value = \"lstUpdTime\")\n    String lstUpdTime, @RequestParam(value = \"state\")\n  int state) throws ParseException, LatinServiceException {\n    if (state % 100 == 10) {\n      // todo 增加作废校验逻辑\n    }\n    $!{clazz}Service.changeBizState(billNumber, StringUtil.toDate(lstUpdTime, JsonUtil.DATE_FORMAT),\n        state, getOperateContext());\n  }\n  \n  /**\n   * 获取指定的$!{tableInfo.comment}单据。\n   *\n   * @param billNumber\n   *          $!{tableInfo.comment}单号，not null。\n   * @param fetchDetails\n   *          是否取出明细。\n   * @return $!{tableInfo.comment}。\n   */\n  @RequestMapping(value = \"loadByNumber\", method = RequestMethod.GET)\n  public @ResponseBody $!{tableInfo.name} loadByNumber(@RequestParam(value = \"billNumber\")\n    String billNumber, @RequestParam(value = \"fetchDetailCustomFields\")\n    boolean fetchDetailCustomFields) throws LatinServiceException {\n    // todo 执行查询业务\n    $!{tableInfo.name} $!{clazz} = $!{clazz}Service.getByNumber(billNumber,\n        fetchDetailCustomFields ? $!{tableInfo.name}s.FETCH_DETAILS_CUSTOMFIELDS : $!{tableInfo.name}s.FETCH_DETAILS);\n    return $!{clazz};\n  }\n  \n  /**\n   * 获取上下单单号\n   *\n   * @param billNumber\n   *          当前单号。\n   * @return (上一单号，下一单号)\n   */\n  @RequestMapping(value = \"getPrevNextNum\", method = RequestMethod.GET)\n  public @ResponseBody List<String> getPrevNextNum(@RequestParam(value = \"billNumber\")\n  String billNumber) {\n    BillNumNaviParameter parameter = new BillNumNaviParameter();\n    parameter.setNum(billNumber).setQueryField(\"num\").setQueryTable(\"$!{clazz}\");\n    \n    // todo 增加其他查询条件\n\n    return h4ModuleService.getPrevNextNum(parameter);\n  }\n  \n  /**\n   * 计算自定义字段。\n   *\n   * @param moduleId\n   *          模块，not null。\n   * @param masterObj\n   *          主对象，not null。\n   * @return 自定义字段的值。\n   * @throws LatinServiceException\n   */\n  @RequestMapping(value = \"calcs\", method = RequestMethod.POST)\n  public @ResponseBody List<Map<String, String>> calcs(@RequestBody\n    BCalcRefParams params) {\n    $!{tableInfo.name} $!{clazz} = JsonUtil.jsonToObject(params.getMasterObj(), $!{tableInfo.name}.class);\n    //todo 明细行根据实际情况设置\n    List<Object> detailes = new ArrayList<>();\n    // List<$!{tableInfo.name}Detail> detailes = JsonUtil.jsonToArrayList(params.getDetailObj(),\n    //    $!{tableInfo.name}Detail.class);\n    List<Map<String, String>> results = detailCustomFieldService.calcs(params.getModuleId(),\n        params.getComponentName(), $!{clazz}, detailes);\n    return results;\n\n  }\n  \n  @RequestMapping(value = \"calcReferences\", method = RequestMethod.POST)\n  public @ResponseBody H4ComponentRefOutput calcReferences(@RequestBody\n    BCalcRefParams params) {\n    $!{tableInfo.name} $!{clazz} = JsonUtil.jsonToObject(params.getMasterObj(), $!{tableInfo.name}.class);\n    // todo 替换成明细行\n    Object d = null;\n    // $!{tableInfo.name}Detail d = JsonUtil.jsonToObject(params.getDetailObj(), $!{tableInfo.name}Detail.class);\n    H4ComponentRefOutput reference = h4ModuleService.calcReferences(params.getModuleId(),\n        params.getComponentName(), params.getGdGid(), $!{clazz}, d);\n    return reference;\n  }\n  \n  /**\n   * 汇总导入。\n   *\n   * @param params\n   *          导入参数。\n   * @return\n   * @throws LatinServiceException\n   */\n  @RequestMapping(value = \"importForStandard\", method = RequestMethod.POST)\n  public @ResponseBody JobScheduleHandler importForStandard(@RequestBody\n    ImpexParams params) throws LatinServiceException {\n\n    // todo 汇总导入按需添加\n    return null;\n  }\n  \n  /**\n   * 明细界面导入。\n   *\n   * @param params\n   *          导入参数。\n   * @return\n   * @throws LatinServiceException\n   */\n   // todo 明细导入按实际导入类编写代码\n  // @RequestMapping(value = \"importForDetail\", method = RequestMethod.POST)\n  // public @ResponseBody JobScheduleHandler importForDetail(@RequestBody\n  //   $!{tableInfo.name}ImportParams params) throws LatinServiceException {\n  //      \n    // todo 明细导入按需添加\n  //   return null;\n  // }\n  \n   /**\n   * 更新打印时间。\n   *\n   * @param billNumber\n   *          单号，not null。\n   */\n  @RequestMapping(value = \"updatePrintTime\", method = RequestMethod.POST)\n  public @ResponseBody PrintUpd updatePrintTime(@RequestParam(value = \"billNumber\")\n  String billNumber) {\n    ModuleQueryParameter parameter = new ModuleQueryParameter().setQueryTable(\"$!{clazz}\")\n        .setQueryField(\"prnTime\").addWhere(\"cls = '\" + $!{tableInfo.name}s.BILLTYPE + \"'\")\n        .addWhere(\"num = ?\", billNumber);\n\n    moduleService.updateTime(parameter, LatinUtil.operCtxConverter(getOperateContext()));\n    PrintUpd result = new PrintUpd();\n    result.setPrnTime(getOperateContext().getTime());\n    return result;\n  }\n  \n  /**\n   * 获取缓存对象类\n   */\n  @Override\n  protected Class getCacheEntityCls() {\n      // todo 替换成明细对象\n    return Object.class;\n  }\n  \n  private DQueryDefinition buildQuerySelect(DQueryDefinition dQueryDef) {\n    dQueryDef.addSelect(\"o.*\");\n    //todo 增加其他关联语句\n    return dQueryDef;\n  }\n  \n  private DQueryDefinition buildQueryDefinition(QueryFilter queryFilter) {\n    DQueryDefinition dQueryDef = new DQueryDefinition();\n    \n    dQueryDef.addFrom(\"$!{clazz}\", \"o\");\n    \n    // todo 增加其他查询条件\n    \n    return dQueryDef;\n  }\n\n}\n"
      }, {
        "name" : "apisearch.js.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"\", \".js\")\n\n##设置回调\n$!callback.setFileName($tool.append($tableInfo.name, \".js\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/ext\"))\n\n\nExt.define('Pro.view.diralc.DiralcSearch', {\n  extend: 'Common.view.bill.SearchA'\n});"
      } ]
    }
  },
  "columnConfig" : {
    "H6-Group" : {
      "name" : "H6-Group",
      "elementList" : [ {
        "title" : "disable",
        "type" : "BOOLEAN",
        "selectValue" : ""
      }, {
        "title" : "support",
        "type" : "SELECT",
        "selectValue" : "add,edit,query,del,ui"
      } ]
    }
  },
  "globalConfig" : {
    "H6-Group" : {
      "name" : "H6-Group",
      "elementList" : [ {
        "name" : "autoImport.vm",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "define.vm",
        "value" : "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackage()\n#macro(setPackage)\npackage #if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}#{end};\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义类注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(classComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})\n *\n * @author $!author\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
      }, {
        "name" : "init.vm",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
      }, {
        "name" : "mybatisSupport.vm",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"
      }, {
        "name" : "day.vm",
        "value" : "$!time.currTime(\"dd\")"
      }, {
        "name" : "month.vm",
        "value" : "$!time.currTime(\"MM\")"
      }, {
        "name" : "year.vm",
        "value" : "$!time.currTime(\"yyyy\")"
      } ]
    }
  }
}